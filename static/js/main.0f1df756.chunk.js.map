{"version":3,"sources":["SeasonDisplay.js","Loading.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","getSeason","lat","month","SeasonDisplay","props","season","Date","getMonth","className","Loading","message","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sNAoBMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,sBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,eAIRE,EAAW,SAACC,EAAIC,GACpB,OAAGA,EAAM,GAAKA,EAAM,EACfD,EAAI,EACE,SAGA,SAINA,EAAI,EACE,SAGA,UAOEE,EAhDO,SAACC,GACrB,IAAMC,EAASL,EAAUI,EAAMH,KAAK,IAAIK,MAAOC,YADhB,EAKNZ,EAAaU,GAA/BR,EALwB,EAKxBA,KAAMC,EALkB,EAKlBA,SAEb,OACE,yBAAKU,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,kBAAaV,EAAb,WACZ,4BAAKD,GACL,uBAAGW,UAAS,kBAAaV,EAAb,aCGHW,G,MAfC,SAACL,GACf,OACE,yBAAKI,UAAU,kBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,sBAAsBJ,EAAMM,aCF7CC,E,4MAMJC,MAAQ,CAACX,IAAI,KAAMY,aAAc,I,kEAUb,IAAD,OACjBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GACC,EAAKC,SAAS,CAAElB,IAAMiB,EAASE,OAAOC,cAExC,SAACC,GACC,EAAKH,SAAS,CAAEN,aAAcS,EAAIZ,e,sCAOtC,OAAGa,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMX,IACjC,uCAAasB,KAAKX,MAAMC,eAE7BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMX,IACjC,kBAAC,EAAD,CAAeA,IAAKsB,KAAKX,MAAMX,MAEjC,kBAAC,EAAD,CAASS,QAAQ,sC,+BAIxB,OAAO,yBAAKF,UAAU,cAAce,KAAKC,qB,GAvC3BC,IAAMC,WA4DxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.0f1df756.chunk.js","sourcesContent":["import './SeasonDisplay.css'\r\nimport React from 'react'\r\n\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  // const text = season==='winter' ? 'Burr, it is chilly' : 'Lets hit the beach';\r\n  // const icon = season==='winter' ? 'snowflake' : 'sun';\r\n\r\n  const {text, iconName} = seasonConfig[season];\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach\",\r\n    iconName: \"sun\"\r\n  },\r\n  winter: {\r\n    text: \"Burrr, it's chilly\",\r\n    iconName: \"snowflake\"\r\n  }\r\n};\r\n\r\nconst getSeason =(lat,month) => {\r\n  if(month>2 && month<9){\r\n    if(lat>0){\r\n      return 'summer'\r\n    }\r\n    else{\r\n      return 'winter'\r\n    }\r\n  }\r\n  else{\r\n    if(lat>0){\r\n      return 'winter'\r\n    }\r\n    else{\r\n      return 'summer'\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default SeasonDisplay;\r\n","import React from 'react';\r\nimport './Loading.css'\r\n\r\nconst Loading = (props) => {\r\n  return(\r\n    <div className=\"ui segment big\">\r\n      <div className=\"ui active dimmer big\">\r\n        <div className=\"ui text loader big\">{props.message}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//HOW TO FIX THIS?\r\n// Loading.defaultProps = {\r\n//   message = \"Loading...\"\r\n// }\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Loading from './Loading';\r\n\r\nclass App extends React.Component{\r\n  // constructor(props){\r\n  //   super(props);\r\n  //   this.state={ lat: null, errorMessage: '' };\r\n  // }\r\n\r\n  state = {lat:null, errorMessage: ''};\r\n\r\n  // componentDidMount(){\r\n  //   console.log(\"My component was rendered to the screen\");\r\n  // }\r\n  //\r\n  // componentDidUpdate(){\r\n  //   console.log(\"My component was just updated - it rerendered\");\r\n  // }\r\n\r\n  componentDidMount(){\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        this.setState({ lat : position.coords.latitude });\r\n      },\r\n      (err) => {\r\n        this.setState({ errorMessage: err.message });\r\n      }\r\n    );\r\n  }\r\n\r\n  //USER-DEFINED HELPER FUNCTION. LETS NAME IT RENDERCONTENT\r\n  renderContent(){\r\n    if(this.state.errorMessage && !this.state.lat){\r\n      return <div>Error: {this.state.errorMessage}</div>\r\n    }\r\n    if(!this.state.errorMessage && this.state.lat){\r\n      return <SeasonDisplay lat={this.state.lat} />\r\n    }\r\n    return <Loading message=\"Please accept location request!\"/>\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"border red\">{this.renderContent()}</div>\r\n  }\r\n\r\n  // render(){\r\n  //   if(this.state.errorMessage && !this.state.lat){\r\n  //     return <div clasName=\"border red\">\r\n  //             <div>Error: {this.state.errorMessage}</div>\r\n  //           </div>\r\n  //   }\r\n  //   if(!this.state.errorMessage && this.state.lat){\r\n  //     return <div clasName=\"border red\">\r\n  //             <div><SeasonDisplay lat={this.state.lat} /></div>\r\n  //           </div>\r\n  //   }\r\n  //   return <div clasName=\"border Red\">\r\n  //           <Loading message=\"Please accept location request!\"/>\r\n  //          </div>\r\n  // }\r\n  \r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}